<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins on Phi Huỳnh</title>
    <link>https://trumhemcut.github.io/tags/jenkins/</link>
    <description>Recent content in Jenkins on Phi Huỳnh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Aug 2016 11:17:34 +0000</lastBuildDate>
    <atom:link href="https://trumhemcut.github.io/tags/jenkins/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Continuous Delivery for dotnet core apps using Jenkins and Docker</title>
      <link>https://trumhemcut.github.io/2016/08/17/continuous-delivery-for-dotnet-core-app-using-jenkins--docker</link>
      <pubDate>Wed, 17 Aug 2016 11:17:34 +0000</pubDate>
      
      <guid>https://trumhemcut.github.io/2016/08/17/continuous-delivery-for-dotnet-core-app-using-jenkins--docker</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m very exicted with Docker &amp;amp; dotnet core since they&amp;rsquo;re technologies changing the way we develop our applications which we haven&amp;rsquo;t done as before. I&amp;rsquo;m also been attracted by the tools to build Continous Delivery process so that we can shorten the time to deliver our software to the market. I&amp;rsquo;ve been familiar with Release Management (from Microsoft), TeamCity, Octopus &amp;amp; Jenkins, which are great tools to build CI/CD solutions.&lt;/p&gt;

&lt;p&gt;To continue investigating new way to build CI/CD solution so that we can build, ship &amp;amp; run using Docker images &amp;amp; containers, my colleague &amp;amp; myself have been investigating some days to have a PoC using Jenkins &amp;amp; Docker family toolset &amp;amp; it&amp;rsquo;s great to have a share today.&lt;/p&gt;

&lt;p&gt;The idea is to build a full application life-cycle management (ALM) for the project team. As a developer commits the source code to VCS (such as Gitlab/Github/VS Team Service), the changes should be built &amp;amp; run unit-tests immediately. If there is no issues with build &amp;amp; test, the code base then will be built for Docker images, then is pushed to a privated Docker Registry. Then the deployment process can continue to pull the images &amp;amp; deploy to a clustering environment such as Docker Swarm Mode (from Docker v1.12) or Mesos.&lt;/p&gt;

&lt;p&gt;So in general, there should have the steps as follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assuming we have a VCS ready (I&amp;rsquo;m using Gitlab)&lt;/li&gt;
&lt;li&gt;Jenkins to build the source code, push images to internal Docker Registry &amp;amp; deploy to Docker Swarm Mode cluster&lt;/li&gt;
&lt;li&gt;Internal Docker Registry (insecured mode, it&amp;rsquo;s just PoC :) )&lt;/li&gt;
&lt;li&gt;Docker Swarm Mode to deploy services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To leverage the power of Docker, every tools listed here are Docker images, we can easily make it up by simple &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;assuming-we-have-a-vcs-ready-i-m-using-gitlab&#34;&gt;Assuming we have a VCS ready (I&amp;rsquo;m using Gitlab)&lt;/h2&gt;

&lt;p&gt;My company has a Gitlab environment up &amp;amp; ready to use, I don&amp;rsquo;t want to take time to build a new one. So assuming we have it available like mine.&lt;/p&gt;

&lt;p&gt;But just in case you don&amp;rsquo;t, we can easily build a new one as &lt;code&gt;Dockerfile&lt;/code&gt; below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-jenkins-server&#34;&gt;Build Jenkins Server&lt;/h2&gt;

&lt;p&gt;Here is the &lt;code&gt;Dockerfile&lt;/code&gt; to create Jenkins Server. Be aware of the line &lt;code&gt;RUN groupadd -g dockergroupid docker &amp;amp;&amp;amp; usermod -a -G docker jenkins&lt;/code&gt;, there is a &lt;code&gt;dockergroupid&lt;/code&gt; which is a variable will be replaced by a shell script named &lt;code&gt;create-dockerfile.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Firstly take a look on the Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Dockerfile
FROM jenkinsci/jenkins

USER root
RUN mkdir /var/log/jenkins
RUN mkdir /var/cache/jenkins
RUN chown -R jenkins:jenkins /var/log/jenkins
RUN chown -R jenkins:jenkins /var/cache/jenkins

RUN apt-get update \
      &amp;amp;&amp;amp; apt-get install -y sudo \
      &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

RUN groupadd -g dockergroupid docker &amp;amp;&amp;amp; usermod -a -G docker jenkins 

USER jenkins
ENV JAVA_OPTS=&amp;quot;-Xmx8192m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then create-dockerfile.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# create-dockerfile.sh
dockergroupid=`cat /etc/group | grep doc | cut -d&amp;quot;:&amp;quot; -f3`
sed -i s,dockergroupid,$dockergroupid,g Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-internal-docker-registry&#34;&gt;Build internal Docker Registry&lt;/h2&gt;

&lt;p&gt;The internal Docker Registry is neccessary to store the images built from Jenkins. Since we&amp;rsquo;re building the insecured private registry, we need to update the Docker config &lt;code&gt;/etc/default/docker&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Use DOCKER_OPTS to modify the daemon startup options.
DOCKER_OPTS=&amp;quot; --insecure-registry 10.12.0.137:5000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please be aware that insecured registry is only used for PoC purpose &amp;amp; should not be used in Production environment at all.&lt;/p&gt;

&lt;p&gt;Restart the Docker daemon service to get the update affects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service docker restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the registry container&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -p 5000:5000 -d --name registry --restart always -d -v `pwd`/data:/var/lib/registry registry 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We mount a volume from Docker Host to Docker container so that we the images in the registry won&amp;rsquo;t be delete as we delete / re-new the registry container.&lt;/p&gt;

&lt;h2 id=&#34;buid-steps-on-jenkins&#34;&gt;Buid steps on Jenkins&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a new free style project, put it a name &lt;code&gt;dotnetcore test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>