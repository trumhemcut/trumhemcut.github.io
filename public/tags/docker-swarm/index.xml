<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker Swarm on Phi Huỳnh</title>
    <link>https://trumhemcut.github.io/tags/docker-swarm/</link>
    <description>Recent content in Docker Swarm on Phi Huỳnh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jul 2016 13:27:20 +0200</lastBuildDate>
    <atom:link href="https://trumhemcut.github.io/tags/docker-swarm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker networking &amp; Docker Swarm Mode Demo</title>
      <link>https://trumhemcut.github.io/2016/07/03/docker-networking-docker-swarm-mode-demo</link>
      <pubDate>Sun, 03 Jul 2016 13:27:20 +0200</pubDate>
      
      <guid>https://trumhemcut.github.io/2016/07/03/docker-networking-docker-swarm-mode-demo</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is a step by step introduction about Docker Networking and new features of Docker Swarm Mode which has just been introduced in #DockerCon 2016.&lt;/p&gt;

&lt;p&gt;We will walk through by examples to understand the Docker Networking. Then will swich to Docker Swarm Mode, demo about the features such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new way to create services&lt;/li&gt;
&lt;li&gt;Scale the services&lt;/li&gt;
&lt;li&gt;Load balancing with Rounting Mesh&lt;/li&gt;
&lt;li&gt;Self-Healing&lt;/li&gt;
&lt;li&gt;Self-Organizing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create -d virtualbox node-0
$ docker-machine create -d virtualbox node-1
$ docker-machine create -d virtualbox node-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Double check to make sure of IP Address of nodes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ip node-0
$ docker-machine ip node-1
$ docker-machine ip node-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change &lt;strong&gt;/etc/hosts&lt;/strong&gt; file with these above IP Addresses &amp;amp; nodes&lt;/p&gt;

&lt;h2 id=&#34;docker-networking-demo&#34;&gt;Docker Networking Demo&lt;/h2&gt;

&lt;p&gt;SSH to the node-0 node&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine ssh node-0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a bridge network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker network create -d bridge --subnet 10.10.0.0/16  vnet-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create containers within that network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8001:8000 --net=vnet-1 --name c1 jwilder/whoami
docker run -d -p 8002:8000 --net=vnet-1 --name c2 jwilder/whoami
docker run -d -p 8003:8000 --net=vnet-1 --name c3 jwilder/whoami
docker run -d -p 8004:8000 --net=vnet-1 --name c4 jwilder/whoami
docker run -d -p 8005:8000 --net=vnet-1 --name c5 jwilder/whoami
docker run -d -p 8006:8000 --net=vnet-1 --name c6 jwilder/whoami
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check the containers in the network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker network inspect vnet-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ping each others&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it c1 bash
$ ping c2
$ ping c3
$ ping c4
$ # and for the others...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple bridge networks demo
Create frontend &amp;amp; backend networks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network create -d bridge --subnet 10.11.0.0/16 frontend
$ docker network create -d bridge --subnet 10.12.0.0/16 backend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove containers off the vnet-1 network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network disconnect vnet-1 c1
$ docker network disconnect vnet-1 c2
$ docker network disconnect vnet-1 c3
$ docker network disconnect vnet-1 c4
$ docker network disconnect vnet-1 c5
$ docker network disconnect vnet-1 c6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect to frontend network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network connect frontend c1
$ docker network connect frontend c2
$ docker network connect frontend c3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect to backend network&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network connect backend c4
$ docker network connect backend c5
$ docker network connect backend c6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ping each other&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it c1 bash
$ ping c2
$ ping c3
$ ping c4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect &lt;strong&gt;c3&lt;/strong&gt; to backend&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker network connect backend c3
$ docker exec -it c3 bash
$ ping c4
$ ping c5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-swarm-mode-demo&#34;&gt;Docker Swarm Mode Demo&lt;/h2&gt;

&lt;p&gt;Create a swarm cluster
Initial swarm manager&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ssh node-0
$ docker swarm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node-1 joins the swarm cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ssh node-1
$ docker swarm join --listen-addr 192.168.99.101:2377 192.168.99.100:2377
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node-2 joins the swarm cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ssh node-2
$ docker swarm join --listen-addr 192.168.99.102:2377 192.168.99.100:2377
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to the node-0 and check the status of nodes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker node ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a service
From node-0, create a service&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker service create -p 5000:5000 --name=cat mikesir87/cats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing the service by browsing at &lt;a href=&#34;http://node-0:5000&#34;&gt;http://node-0:5000&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;scaling-the-service&#34;&gt;Scaling the service&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ docker service scale web=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing the service by browsing at &lt;a href=&#34;http://node-0:5000&#34;&gt;http://node-0:5000&lt;/a&gt;
Testing the service by browsing at &lt;a href=&#34;http://node-1:5000&#34;&gt;http://node-1:5000&lt;/a&gt;
Testing the service by browsing at &lt;a href=&#34;http://node-2:5000&#34;&gt;http://node-2:5000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All works, why this happens, we have only two nodes, but three endpoints are working fine? Will discuss further?&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;routing-mesh&#34;&gt;Routing Mesh&lt;/h3&gt;

&lt;p&gt;Ingress Load Balancing to allow the services exposing port to the outsite world. Only the services has the port published with -p option will join this &lt;strong&gt;ingress network&lt;/strong&gt;. Otherwise, it&amp;rsquo;s only added to &lt;strong&gt;default_gwbridge&lt;/strong&gt; network.&lt;/p&gt;

&lt;p&gt;Try to scale the services to 10 instances as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker service scale web=10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s great if we have time to use a overlay user-defined network and attach the service to this network.&lt;/p&gt;

&lt;h3 id=&#34;blue-print-releasing&#34;&gt;Blue-print Releasing&lt;/h3&gt;

&lt;p&gt;When we need to deploy a new version, Docker 1.12 helps us to easily gain blue-print releasing with following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker service update \ 
    --image trumhemcut/aspnetcore:2.0 aspnet
    --update-parallelism=2 \
    --update-delay=10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;self-healing&#34;&gt;Self-Healing&lt;/h3&gt;

&lt;p&gt;Go to any nodes and try to stop one container. It will create another container for us.&lt;/p&gt;

&lt;h3 id=&#34;self-organization&#34;&gt;Self-Organization&lt;/h3&gt;

&lt;p&gt;Try to shut down a node, it will create containers on another node for us.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully the demo can illustrate the idea of how we&amp;rsquo;re working with the new Docker (v1.12) &amp;amp; Docker Networking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Swarm, aspnet core 1.0 in action</title>
      <link>https://trumhemcut.github.io/2016/06/29/docker-swarm-aspnet-core-1-0-in-action</link>
      <pubDate>Wed, 29 Jun 2016 11:44:08 +0200</pubDate>
      
      <guid>https://trumhemcut.github.io/2016/06/29/docker-swarm-aspnet-core-1-0-in-action</guid>
      <description>

&lt;p&gt;Cuối cùng thì Microsoft cũng ra mắt &lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2016/06/27/announcing-asp-net-core-1-0/&#34;&gt;aspnet core 1.0&lt;/a&gt;, sau một thời gian dài trải qua các version RC1, RC2. Như các bạn cũng biết asp.net core có nhiều tính năng được built-in mà chúng ta không phải tìm kiếm &amp;amp; sử dụng nhiều libraries ngoài như asp.net 5. Có thể kể ra một vài tính năng như sau:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chạy cross-platform trên Windows, Mac và Linux&lt;/li&gt;
&lt;li&gt;Xây dựng trên .NET core, hỗ trợ side-by-side versioning&lt;/li&gt;
&lt;li&gt;Hỗ trợ built-in dependency injection&lt;/li&gt;
&lt;li&gt;Tag Helper kiểu tự nhiên như HTML data attributes (bắt chước Angular 1 :v )&lt;/li&gt;
&lt;li&gt;Có thể host trên IIS hoặc self-host&lt;/li&gt;
&lt;li&gt;Không còn phân biệt giữa MVC/API nữa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Có nhiều cách / tools để bắt đầu một dự án dùng aspnet core 1.0. Chúng ta có thể dùng &lt;a href=&#34;https://www.visualstudio.com/downloads/visual-studio-prerelease-downloads#sec1&#34;&gt;Visual Studio 2015 RC3&lt;/a&gt;, &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; hoặc &lt;a href=&#34;https://eclipse-che.readme.io/&#34;&gt;Eclipse Che&lt;/a&gt; để viết code, deploy lên Windows / Linux / Mac hay Docker tùy thích. Nói chung là có máy nào xài máy đó, thích tool nào xài tool đó :), không còn phụ thuộc vào tools hay environment nữa.&lt;/p&gt;

&lt;p&gt;Trong bài này, tôi sẽ giới thiệu cách develop một dự án aspnet core 1.0 dùng Visual Studio Code trên Mac, deploy lên Docker Swarm Cluster và dùng Docker Compose để scale các service trên Swarm Cluster.&lt;/p&gt;

&lt;h2 id=&#34;cài-đặt-net-core-1-0-visual-studio-code-trên-mac&#34;&gt;Cài đặt .NET Core 1.0, Visual Studio Code trên Mac&lt;/h2&gt;

&lt;p&gt;Để bắt đầu một dự án aspnet core 1.0 trên Mac, chúng ta phải chuẩn bị environment như sau:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cài đặt .NET Core 1.0 theo hướng dẫn &lt;a href=&#34;https://www.microsoft.com/net/core#macos&#34;&gt;ở đây&lt;/a&gt;. Sau khi cài đặt xong, dùng terminal chạy lệnh &lt;code&gt;dotnet --version&lt;/code&gt; để kiểm tra version của dotnet tool và nếu thấy giá trị là &lt;strong&gt;1.0.0-preview2-003121&lt;/strong&gt; nghĩa là chúng ta đã on track.&lt;/li&gt;
&lt;li&gt;Cài đặt Visual Studio Code&lt;/li&gt;
&lt;li&gt;Cài đặt &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;NodeJS&lt;/a&gt; và &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; (optional): bước này không bắt buộc, tuy nhiên tôi khuyến khích sử dụng Yeoman vì rất thuận tiện để tạo project structure. Sau khi cài Yeoman xong thì cài thêm &lt;a href=&#34;https://www.npmjs.com/package/generator-aspnet&#34;&gt;aspnet generator&lt;/a&gt; là chúng ta đã sẵn sàng. Nếu đã cài yeoman &amp;amp; aspnet generator trước đó thì cần update generator để có bộ aspnet generator mới nhất.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;xin-chào-aspnet-core-1-0&#34;&gt;Xin chào aspnet core 1.0&lt;/h2&gt;

&lt;p&gt;Khá dễ dàng để bắt đầu với aspnet core 1.0. Trên Mac, mở terminal và gõ lệnh &lt;code&gt;yo aspnet&lt;/code&gt;, chọn &lt;strong&gt;Empty Web Application&lt;/strong&gt;, đặt tên dự án là &lt;strong&gt;hello-aspnet&lt;/strong&gt; và nhấn enter. Yeoman sẽ tạo ra một project structure cho chúng ta.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ~/projects &amp;amp; cd ~/projects
$ yo aspnet

     _-----_     ╭──────────────────────────╮
    |       |    │      Welcome to the      │
    |--(o)--|    │  marvellous ASP.NET Core │
   `---------´   │        generator!        │
    ( _´U`_ )    ╰──────────────────────────╯
    /___A___\   /
     |  ~  |     
   __&#39;.___.&#39;__   
 ´   `  |° ´ Y ` 

? What type of application do you want to create? Empty Web Application
? What&#39;s the name of your ASP.NET application? hello-aspnet
   create hello-aspnet/.gitignore
   create hello-aspnet/Program.cs
   create hello-aspnet/Startup.cs
   create hello-aspnet/project.json
   create hello-aspnet/web.config
   create hello-aspnet/Dockerfile
   create hello-aspnet/Properties/launchSettings.json
   create hello-aspnet/README.md


Your project is now created, you can use the following commands to get going
    cd &amp;quot;hello-aspnet&amp;quot;
    dotnet restore
    dotnet build (optional, build will also happen when it&#39;s run)
    dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sau đó chúng tao vào thư mục &lt;strong&gt;hello-aspnet&lt;/strong&gt; và chạy các lệnh &lt;code&gt;dotnet restore&lt;/code&gt;, &lt;code&gt;dotnet build&lt;/code&gt; và &lt;code&gt;dotnet run&lt;/code&gt; để chạy dự án.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  hello-aspnet dotnet run
Project hello-aspnet (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.
Hosting environment: Production
Content root path: /Users/phihuynh/projects/hello-aspnet
Now listening on: http://localhost:5000
Application started. Press Ctrl+C to shut down.
info: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]
      Request starting HTTP/1.1 GET http://localhost:5000/  
info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]
      Request finished in 88.3022ms 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sau đó, mở trình duyệt và nhập vào địa chỉ &lt;code&gt;http://localhost:5000&lt;/code&gt; là chúng ta đã có web app đầu tiên chạy trên aspnet core 1.0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://trumhemcut.github.io/images/aspnetcore01.png&#34; alt=&#34;say hello to aspnet core&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;xin-chào-docker&#34;&gt;Xin chào Docker&lt;/h2&gt;

&lt;p&gt;Chúng ta đã có thể say hello với aspnet core 1.0 trên Mac, giờ chúng ta tiếp tục bắt đầu với Docker. Tôi giả sử là chúng ta đã là quen sơ sơ với Docker rồi nên sẽ không nói nhiều về benefits của Docker nữa.&lt;/p&gt;

&lt;p&gt;Để chạy hello-aspnet app vừa rồi trên Docker, cơ bản chúng ta sẽ đi qua các bước như sau:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cài đặt Docker Toolbox, bộ Docker Toolbox sẽ bao gồm Docker Machine, Kitematic &amp;amp; VirtualBox&lt;/li&gt;
&lt;li&gt;Dùng &lt;strong&gt;docker-machine&lt;/strong&gt; để tạo ra một máy ảo boot2docker&lt;/li&gt;
&lt;li&gt;Build image cho app hello-aspnet&lt;/li&gt;
&lt;li&gt;Deploy hello-aspnet app lên Docker bằng docker commands&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;cài-đặt-docker-toolbox&#34;&gt;Cài đặt Docker Toolbox&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.docker.com/products/docker-toolbox&#34;&gt;Docker Toolbox&lt;/a&gt; có 2 phiên bản cho Windows &amp;amp; Mac. Chúng ta lựa chọn phiên bản phù hợp với OS của mình. Sau khi cài xong, chúng ta sẽ có Docker Machine, Kitematic &amp;amp; Virtualbox để sẳn sàng tạo máy ảo.&lt;/p&gt;

&lt;h3 id=&#34;tạo-máy-ảo-bằng-docker-machine&#34;&gt;Tạo máy ảo bằng docker-machine&lt;/h3&gt;

&lt;p&gt;Sau khi đã cài Docker Toolbox, mở terminal lên, dùng lệnh sau để tạo máy ảo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create -d virtualbox docker00 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>